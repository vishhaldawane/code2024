

		Hibernate - JPA
			

			- ORM framework

		Object <--> Relational <-- Mapping



	BankAccount ba = new BankAccount();
	ba.setters... to fillup

1	Then u use the JDBC code to store the above
	above object details(acno,name,balance etc)
	into the DATABASE
	
2	We have also seen the DAO pattern to store the
	same details in the DATABASE

	Department + DepartmentDAO	+ DepartmentDAOImpl
						  insert into dept values...
	Employee   + EmployeeDAO  + EmployeeDAOImpl
						  insert into emp values..

	Customer   + CustomerDAO  + CustomerDAOImpl
						  insert into customer values...
		
3.   ORM way
			you dont have to take care of 
			connection or driver management
			you dont have to create statement
			you dont have to create preparedStatement

			simply use the Hibernate-JPA framework
			to manage your java objects on the
			database system 

use maven project to manage all the things
----------------------------------------------
		1. You need Hibernate framework library
			pom.xml <-- added the dependency for hibernate
			 [ google -> maven dependency for hibernate ]


		2. you need a pojo mapped with the database
				Department.java

		3. this mapping is done via xml file

				department.hbm.xml <-- describe your pojo

				- in the above xml file you will have to
				mention the table name, primary key
				setter/getters properites
				- generator strategies

		4. a configuration (xml) file used to mention
		   the details like, driver name, url, 
			database username, database password etc
			dialect, mapping filename etc

			

 				FirstMavenProject
				|
			-------------
			|		|
			src		pom.xml [project object model] 
			|		1. added the dependencies for hibernate ( line 36)
			|		2. added the dependency for junit, mysql ( line 20,29)
			|		3. maven compiler version 17 added (line 7,8,9,10)
			|
	------------------------
		|			|
		main			test
		|			|	JNUIT - Test Driven Development
	-------------		TEST CASES HERE
	|		|			test case1 - insert		
	java	 resources		test case2 - update
	|		|			test case3 - delete and so on
	|		| 4
5	|		| hibernate.cfg.xml <-- key and value pair, db driver,url,username,password
Department	| department.hbm.xml <-- mapping of table <class> , primary key<id> and other columns <property>
  no-arg ctor
  set/get

DepartmentTest
	main



Archieve = a single file [ holding multiple files into it]
				like a bundle 
	
tar = Tape ARchieve

winrar = windows archieve

jar = Java ARchieve


1)notepad A.java
----------------
class Tiger{}class Lion { } class Bear { } 

class Hen {}class Horse {}class Dog{ }

class Parrot{}class Sparrow{}class Crow{}
-----------------
2) at the command prompt of this A.java
		jar -cvf animal.jar *.class <-- to include all
				the class files into a single file

			-c  means create a jar file
			-v means verbose [ means to show up ]
			-f file to create
jar -cvf birds.jar Crow.class Parrot.class Sparrow.class
jar -cvf domestic-animals.jar Hen.class Horse.class Dog.class
jar -cvf wild-animals.jar Tiger.class Lion.class Bear.class
----------------------------------------


	









